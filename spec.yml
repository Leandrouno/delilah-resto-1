swagger: "2.0"
info:
  description: "This document contains the specifications to access and use Delilah-Rest贸's API."
  version: "1.0.0"
  title: "Delilah Rest贸"
  termsOfService: "http://delilahresto.com/terms/"
  contact:
    email: "apiteam@delilahresto.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v1"
tags:
  - name: "products"
    description: "Contains the available products of the Rest贸"
  - name: "orders"
    description: "Access to Rest贸 orders"
  - name: "users"
    description: "Operations about users"
schemes:
  - "https"
  - "http"
paths:
  /products:
    get:
      tags:
        - "products"
      summary: "Returns product inventory"
      description: "Returns all the products listed in the store"
      operationId: "getInventory"
      produces:
        - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product_stored"

    post:
      tags:
        - "products"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "Authentication Token"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Product object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Product_upload"
      responses:
        201:
          description: "Created"
        405:
          description: "Invalid input"
      security:
        - store_auth:
            - "write:products"
    put:
      tags:
        - "products"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Product object that needs to be updated in the store"
          required: true
          schema:
            $ref: "#/definitions/Product_upload"
      responses:
        202:
          description: "Acepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
        405:
          description: "Validation exception"
      security:
        - store_auth:
            - "write:products"

    delete:
      tags:
        - "products"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
        - "application/json"
      parameters:
        - name: "token"
          description: "Authentication Token"
          in: "header"
          required: true
          type: "string"
        - name: "productId"
          in: "path"
          description: "Product id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Deleted"
        401:
          description: "Unauthorized"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
      security:
        - store_auth:
            - "write:products"

  /orders:
    post:
      tags:
        - "orders"
      summary: "Add a new order to the store"
      description: ""
      operationId: "addOrder"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Order object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Orders"
      responses:
        201:
          description: "Created"
        405:
          description: "Invalid input"

    put:
      tags:
        - "orders"
      summary: "Update the status of an existing order"
      description: ""
      operationId: "updateOrderStatus"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "token"
          description: "Authentication Token"
          in: "header"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Order status that needs to be updated in the store"
          required: true
          schema:
            $ref: "#/definitions/Order_statusToUpload"
      responses:
        202:
          description: "Acepted"
        400:
          description: "Invalid status supplied"
        401:
          description: "Not authorized"
        404:
          description: "Order not found"
      security:
        - store_auth:
            - "write:orders"

  /users:
    post:
      tags:
        - "users"
      summary: "Create user"
      description: "Creates a new user into the store."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User created"
        400:
          description: "Missing arguments"

  /users/login:
    get:
      tags:
        - "users"
      summary: "Logs user into the store"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "Credentials"
          in: "body"
          description: "The username and password for login"
          required: true
          schema:
            type: "object"
            properties:
              Username:
                type: "string"
              Password:
                type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"

securityDefinitions:
  store_auth:
    type: "oauth2"
    authorizationUrl: "localhost/v1/users/login"
    flow: "implicit"
    scopes:
      write:products: "create, modify and delete products in the store"
      write:orders: "modify orders status in the store"

definitions:
  Orders:
    type: "object"
    properties:
      User:
        type: "object"
        $ref: "#/definitions/User_authenticated"
      Products:
        type: "array"
        items:
          $ref: "#/definitions/Selected_item"
      Method of payment:
        type: "string"
        description: "payment method chosen by the user"
        enum:
          - "cash"
          - "credit card"
      Status:
        type: "string"
        description: "order status in the store"
        enum:
          - "new"
          - "confirmed"
          - "preparing order"
          - "delivering"
          - "delivered"

  Selected_item:
    type: "object"
    properties:
      product:
        $ref: "#/definitions/Product_stored"
      quantity:
        type: "number"

  User:
    type: "object"
    properties:
      username:
        type: "string"
      name:
        type: "string"
      password:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      phone:
        type: "string"

  User_authenticated:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
      address:
        type: "string"
      phone:
        type: "string"

  Order_statusToUpload:
    type: "object"
    properties:
      OrderId:
        type: "integer"
        format: "int64"
      Status:
        type: "string"
        description: "order status in the store"
        enum:
          - "new"
          - "confirmed"
          - "preparing order"
          - "delivering"
          - "delivered"

  Product_stored:
    type: "object"
    required:
      - "name"
      - "photoUrls"
      - "price"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Double-burger"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      price:
        type: "number"
        xml:
          name: "price"
      status:
        type: "string"
        description: "product status in the store"
        enum:
          - "available"
          - "unavailable"
  Product_upload:
    type: "object"
    required:
      - "name"
      - "photoUrls"
      - "price"
    properties:
      name:
        type: "string"
        example: "Double-burger"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      price:
        type: "number"
        xml:
          name: "price"
      status:
        type: "string"
        description: "product status in the store"
        enum:
          - "available"
          - "unavailable"
